# -*- coding: utf-8 -*-
"""Декораторы

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/MakarevichDE/722bc050c5a562ed165e87d50a4b05ef/.ipynb

**Задание 1**
"""

def sum2(func):
  def how(sp):
    y=0
    y=func(sp)
    if y>10:
      print("Очень много")
    elif y==0:
      print("Нету(")
    else:
      print("Четных чисел - ",y)
  return how

@sum2
def sum(sp):
  x=0
  for i in sp:
    if (i%2 == 0):
      x += 1
  return x   


x=int(input("Введите 1-е число: "))
z = list()
i=1
while x != 0:
    z.append(x)
    i +=1
    x=int(input("Введите {}-е число: ".format(i)))

sum(z)

"""**Задание 2**"""

def decorator(func):
  def vid(self,other):
    C=func(self,other)
    print("(",self.x,",",self.y,") + (",other.x,",",other.y,") = (",C.x,",",C.y,")")
  return vid

class Vector:
    def __init__(self, x = 0, y = 0):
        self.x = x
        self.y = y
    @decorator
    def __add__(self, other):
        return Vector(self.x + other.x, self.y + other.y)

A = Vector(1, 2)
B = Vector(3, 4)
C = A + B

"""**Пример** **1**"""

class TestClass:

    def __init__(self):
        self.public_variable = "I'm public!"
        self.__private_variable = "I'm too shy to be public!"

    def get_public_variable(self):
        return self.public_variable

    def get_private_variable(self):
        return self.__private_variable

if __name__ == "__main__":
    test_class = TestClass()
    print(" ".join(["Public variable:", test_class.get_public_variable()]))
    print(" ".join(["Public variable:", test_class.public_variable]))

    print(" ".join(["Private variable:", test_class.get_private_variable()]))
    print(" ".join(["Private variable:", test_class._private_variable]))

"""**Пример** **2**"""

class UniversityMember:
    passToUniversity = ''
    status = True

    def checkStatus(self):
        return self.status

    def dismiss(self):
        self.status = False
        self.pass_to_university = None
        
class Student(UniversityMember):
    group = None

class Teacher(UniversityMember):
    cathedral = None

class Administrator(UniversityMember):
    pass

"""**Пример 3**"""

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    # classmethod чтобы создать объект по году рождения,
    # "альтернативный" конструктор
    @classmethod
    def fromBirthYear(cls, name, year):
        return cls(name, 2020 - year)

    # статический метод,чтобы проверить совершеннолетие
    @staticmethod
    def isAdult(age):
        return age > 18

person1 = Person('Петя', 21)
person2 = Person.fromBirthYear('Петя', 1996)

print(person1.age)
print(person2.age)

# print the result
print(Person.isAdult(22))